#!/bin/sh
#===============================================================================
#
#  suspend
#
#  Copyright (C) 2016-2021 by Digi International Inc.
#  All rights reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License version 2 as published by
#  the Free Software Foundation.
#
#
#  !Description: suspend system to RAM
#
#===============================================================================

scriptname="$(basename ${0})"
syspower="/sys/power/state"
lockfile="/var/lock/${scriptname}.lock"
lockfd="9"

usage() {
	printf "\nSuspend system to RAM memory\n"
	printf "\nUsage: ${scriptname} [OPTIONS]\n
	-h      Show this help
	\n"
}

suspend_interfaces() {
	if grep -qs '^wlan0' /var/run/ifstate; then
		ifdown wlan0 && up_wlan_on_resume="1"
	fi
	if grep -qs '^wlan' /proc/modules; then
		rmmod wlan
	fi
}

resume_interfaces() {
	if ! grep -qs '^wlan0' /var/run/ifstate; then
		# Trigger wireless module loading event, and wait until the interface exists
		udevadm trigger --action=add --attr-match="modalias=sdio:c00v0271d050A"
		timeout -t 5 sh -c "while [ ! -d /sys/class/net/wlan0 ]; do sleep .2; done" 2>/dev/null
		[ -n "${up_wlan_on_resume}" ] && ifup wlan0
	fi
}

enter_critical_section() {
	# Create lock file
	eval "exec ${lockfd}>${lockfile}"

	# Acquire the lock in non blocking mode. Otherwise, additional calls
	# to the script will be queued and the system will endlessly go in
	# and out of suspend to ram
	flock -n "${lockfd}" || exit 0
}

exit_critical_section() {
	# Release the lock
	flock -u "${lockfd}"
}

while getopts "h" c; do
	case "${c}" in
		h) usage; exit;;
	esac
done

if [ -f "${syspower}" ]; then
	# Avoid running multiple instances of this script in parallel
	enter_critical_section

	# Pre-suspend actions
	suspend_interfaces

	# Suspend the device
	printf "mem" > ${syspower}

	# Post-resume actions
	resume_interfaces

	exit_critical_section
else
	printf "\n[ERROR] File ${syspower} not found\n\n"
fi
